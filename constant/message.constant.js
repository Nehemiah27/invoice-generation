export const userResponses = {
    USER_CREATE_SUCCESS: "User Created Successfully",
  },
  authResponses = {
    AUTH_SUCCESS: "User Authenticated Successfully",
  },
  authErrors = {
    AUTH_ERROR: "Server is allocated at the moment",
    USER_NOT_FOUND: "User not found with the email given",
    INVALID_PASSWORD: "Incorrect password provided",
    EMAIL_REQUIRED: "User Email is required",
    EMAIL_INVALID: "User Email format is not as per the email standard",
    EMAIL_EMPTY: "User Email should not be empty",
    EMAIL_STRING: "User Email must be a string",
    PASSWORD_EMPTY: "User Password should not be empty",
    PASSWORD_STRING: "User Password must be a string",
    PASSWORD_REQUIRED: "User Password is required",
    INVALID_TOKEN: "Unauthorized on grounds of Invalid token",
  },
  userErrors = {
    DUPLICATE_USER: "Duplicate User email found to create",
    EMAIL_REQUIRED: "User Email is required",
    EMAIL_INVALID: "User Email format is not as per the standard",
    EMAIL_EMPTY: "User Email should not be empty",
    EMAIL_STRING: "User Email must be a string",
    NAME_REQUIRED: "User name is required",
    NAME_EMTPY: "User name should not be empty",
    NAME_STRING: "User name must be a string",
    NAME_INVALID:
      "User name should contain minimum 3 letters starting with a letter",
    PASSWORD_REQUIRED: "User Password is required",
    PASSWORD_INVALID:
      "User Password is not as per the standard, As per standard must be 8 letters with atleast 1 upper case alphabet, 1 lower case alphabet & special character",
    PASSWORD_EMPTY: "User Password should not be empty",
    PASSWORD_STRING: "User Password must be a string",
  },
  invoiceResponses = {
    LIST_SUCCESS: "Invoices list of User generated successfully",
  },
  invoiceErrors = {
    PRODUCT_NAME_REQUIRED: "Product name is required",
    PRODUCT_NAME_EMPTY: "Product name must not be empty",
    PRODUCT_NAME_STRING: "Product name must be a string",
    QTY_NUMBER: "Quantity must be a number",
    QTY_INTEGER: "Quantity must be an integer",
    QTY_MIN: "Quantity must be at least 1",
    QTY_REQUIRED: "Quantity is required",
    RATE_REQUIRED: "Rate is required",
    RATE_NUMBER: "Rate must be a number",
    RATE_POSITIVE: "Rate must be a positive number",
    PRODUCT_ARRAY: "Products must be an array",
    PRODUCT_MIN: "At least one product is required",
    PRODUCT_REQUIRED: "Minimum one product is required to generate Invoice",
    INVOICE_NOT_FOUND: "Invoice not found for the given Invoice ID",
  },
  envErrors = {
    PORT_REQUIRED: "Node JS hosting port is required",
    PORT_MUST_BE_NUMBER: "Node JS hosting port must be a number",
    MONGODB_URL_REQUIRED: "Couldn't find mongoDB URL",
    MONGODB_URL_MUST_BE_STRING: "MongoDB URL must be a type of string",
    MONGODB_URL_EMPTY: "MongoDB URL should not be empty",
    JWT_SECRET_REQUIRED: "Couldn't find mongoDB URL",
    JWT_SECRET_MUST_BE_STRING: "MongoDB URL must be a type of string",
    JWT_SECRET_EMPTY: "MongoDB URL should not be empty",
    HOST_URL_REQUIRED: "Host URL of project is required",
    HOST_URL_STRING: "Host URL of project must be a type of string",
    HOST_URL_EMPTY: "Host URL of project should not be empty",
  },
  serverErrors = {
    INTERNAL_SERVER_ERROR: "Something went wrong",
    ERROR_HASHING_PASSWORD: "Error hashing password",
    ERROR_HASH_COMPARE: "Error comparing passwords",
  };
